index.html: https://codeshare.io/k0b3RV
styles.css: https://codeshare.io/4Yq3E3
logic.js: https://codeshare.io/1VbNEX


//variables are storage of values
//variables-reusable names that reprensents word with values

let board
let score = 0
let rows = 4
let columns = 4

// This variables will be used to assure that the player, will be congratulated only one time after reaching 2048, 4096, or 8192

let is2048Exist = false;
let is4096Exist = false;
let is8192Exist = false;

//functions- reusable tasks
function setGame(){
    board = [
        [0,0,1024,1024],
        [0,0,0,0],
        [0,0,0,0],
        [0,0,0,0]
    ]; // we will use this back end board to create

    // loops are code to repeat the task inside it 
    for(let r=0; r < rows; r++){

        setTwo();
        setTwo();
    
		for(let c=0; c < columns; c++){


			// create and design a tile

           // create tile using div
			let tile = document.createElement("div");

			tile.id = r.toString() + "-" + c.toString();

			let num = board[r][c];

			updateTile(tile, num);

			document.getElementById("board").append(tile)
		}
	}
}

// updateTile() - updates the appearance of the tile (that is should have tile number and background color)

function updateTile(tile, num){

	tile.innerText = "";
	tile.classList.value = "";

	tile.classList.add("tile");

	if(num > 0){
		tile.innerText = num.toString();
	
		if(num <= 4096){
			tile.classList.add("x" + num.toString());
		}

		else{
			tile.classList.add("x8192");
		}
	}
}


window.onload = function(){
    setGame()
}

function handleSlide(event){
	console.log(event.code); // event.code - is the pressed key in our keyboard

	if(["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown"].includes(event.code)){

		 event.preventDefault(); // prevents the default behaviour
	
         if(event.code == "ArrowLeft"){
			slideLeft();
		}
		else if(event.code == "ArrowRight"){
			slideRight();
		}
		else if(event.code == "ArrowUp"){
			slideUp();
		}
		else if(event.code == "ArrowDown"){
			slideDown();
		}
    }
}

document.addEventListener("keydown", handleSlide);


function slideLeft(){

	for(let r=0; r<rows; r++){
		let row = board[r]
		row = slide(row);
		board[r] = row;

		for(let c = 0; c<columns; c++){
			let tile = document.getElementById(r.toString() + "-" + c.toString());
			let num = board[r][c];
			updateTile(tile,num);
		}
	}
}

function slideRight(){

	for(let r=0; r<rows; r++){

		let row = board[r]

        row.reverse();
		row = slide(row);
        row.reverse();

		board[r] = row;

		for(let c = 0; c<columns; c++){
			let tile = document.getElementById(r.toString() + "-" + c.toString());
			let num = board[r][c];
			updateTile(tile,num);
		}
	}
}


function slideUp(){

	for(let c=0; c<columns; c++){
		let col =  [board[0][c], board[1][c], board[2][c], board[3][c] ];
		col = slide(col);

        for(let r = 0; r<rows; r++){
            board[r][c] = col[r];
			let tile = document.getElementById(r.toString() + "-" + c.toString());
			let num = board[r][c];
			updateTile(tile,num);
		}
	}
}

function slideDown(){

	for(let c=0; c<columns; c++){
		let col =  [board[0][c], board[1][c], board[2][c], board[3][c] ];
		col.reverse();
        col = slide(col);
        col.reverse();

        for(let r = 0; r<rows; r++){
            board[r][c] = col[r];
			let tile = document.getElementById(r.toString() + "-" + c.toString());
			let num = board[r][c];
			updateTile(tile,num);
		}
	}
}

function filterZero(row){
	return row.filter(num => num != 0);
}


function slide(row){
	row = filterZero(row);
	for(let i = 0; i<row.length - 1; i++){
		if(row[i] == row[i+1]){
			row[i] *= 2;
			row[i+1] = 0;
		}
	}

	// Add zeroes back
	while(row.length < columns){
		row.push(0);
	}

	return row;

}

function hasEmptyTile(){
	//loop
	for(let r=0; r<rows; r++){
		for(let c=0; c<rows; c++){
            if(board[r][c]==0){
                return true;
            }

		}
	}

    return false;

}
function setTwo(){

    // if hasEmptyTile() function returns false, the setTwo() function will not generate a new tile.
    if(hasEmptyTile() == false){
      return; // "I will do nothing, I don't need to generate a new tile"
    }

    // the codes below are the codes to be executed once the condition above is not satisfied. 
    let found = false;

    while(!found){

      // This is to generate a random row and column position to check a random tile, and generate a tile with number 2 in it.
      let r = Math.floor(Math.random() * rows);
      let c = Math.floor(Math.random() * columns);

      // if the random tile is an empty tile, the program will make it a tile with number 2. 
      if(board[r][c]==0){

        
        board[r][c] = 2;

        let tile = document.getElementById(r.toString() + "-" + c.toString());
        tile.innerText = "2";
        tile.classList.add("x2");

        found = true;
      }
    }

  }

  function checkWin(){
    for(let r=0; r<rows; r++){
		for(let c = 0; c<columns; c++){

  if(board[r][c] == 2048 && is2048Exist == false){
    alert("You Win! You got 2048" );
    is2048Exist = true;
}	
else if(board[r][c] == 4096 && is4096Exist == false){
    alert("You are unstoppable at 4096!" );
    is4096Exist = true;
}	
else if(board[r][c] == 8192 && is8192Exist == false){
    alert("Victory! You have reached 8192! You are incredibly awesome" );
    is8192Exist = true;
}
    }
}

}
